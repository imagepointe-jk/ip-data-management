// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//#region General
model User {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  email        String        @unique
  passwordHash String
  role         String        @default("user") //this system is very primitive right now but no more than this is needed yet
  startedSyncs HubSpotSync[]
}

model Color {
  id                     Int                              @id @default(autoincrement())
  name                   String                           @unique
  hexCode                String                           @unique
  displayInDesignLibrary Boolean                          @default(true)
  designs                Design[]
  designVariations       DesignVariation[]
  customProductSettings  CustomProductSettingsVariation[]
}

model DignityApparelSearchString {
  id        Int      @id @default(autoincrement())
  search    String
  createdAt DateTime @default(now())
}

//#endregion
//#region Design Library
model Design {
  id                       Int                 @id @default(autoincrement())
  designNumber             String
  name                     String?
  description              String?
  featured                 Boolean             @default(false)
  date                     DateTime            @default("1970-01-01T00:00:00Z")
  status                   String              @default("Draft")
  designSubcategories      DesignSubcategory[]
  designType               DesignType          @relation(fields: [designTypeId], references: [id])
  designTypeId             Int                 @default(0)
  designTags               DesignTag[]
  defaultBackgroundColor   Color               @relation(fields: [defaultBackgroundColorId], references: [id])
  defaultBackgroundColorId Int
  imageUrl                 String              @default("none")
  priority                 Int                 @default(0)
  variations               DesignVariation[]
}

model DesignVariation {
  id                  Int                 @id @default(autoincrement())
  parentDesign        Design              @relation(fields: [parentDesignId], references: [id])
  parentDesignId      Int
  imageUrl            String              @default("none")
  color               Color               @relation(fields: [colorId], references: [id])
  colorId             Int
  designSubcategories DesignSubcategory[]
  designTags          DesignTag[]
}

model DesignType {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  designs          Design[]
  designCategories DesignCategory[]
}

model DesignCategory {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique
  designType          DesignType          @relation(fields: [designTypeId], references: [id])
  designTypeId        Int
  designSubcategories DesignSubcategory[]
}

model DesignSubcategory {
  id               Int               @id @default(autoincrement())
  name             String
  designs          Design[]
  designVariations DesignVariation[]
  designCategory   DesignCategory    @relation(fields: [designCategoryId], references: [id])
  designCategoryId Int
}

model DesignTag {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  designs          Design[]
  designVariations DesignVariation[]
}

//#endregion
//#region HubSpot
model HubSpotSync {
  id          Int       @id @default(autoincrement())
  startedBy   User      @relation(fields: [startedById], references: [id])
  startedById Int
  startedAt   DateTime
  finishedAt  DateTime?
  progress    Decimal //0 is no progress, 1 is complete
}

//#endregion
//#region Customizer
//base table for customizer product records.
//this table should not contain any product-specific fields that might be varied,
//such as color, material, size, etc.
//these should instead be in the variation table.
//a product that has "no variations" will in reality have exactly 1 variation treated as the base,
//and every product should have at least one variation.
model CustomProductSettings {
  id            Int                              @id @default(autoincrement())
  createdAt     DateTime                         @default(now())
  updatedAt     DateTime                         @updatedAt
  published     Boolean                          @default(false)
  order         Int                              @default(0)
  variations    CustomProductSettingsVariation[]
  wooCommerceId Int
}

model CustomProductSettingsVariation {
  id                   Int                   @id @default(autoincrement())
  parentSettings       CustomProductSettings @relation(fields: [parentSettingsId], references: [id], onDelete: Cascade)
  parentSettingsId     Int
  views                CustomProductView[]
  color                Color                 @relation(fields: [colorId], references: [id])
  colorId              Int
  order                Int                   @default(0)
  sizeOptions          ProductSizeOptions    @relation(fields: [productSizeOptionsId], references: [id])
  productSizeOptionsId Int                   @unique
}

model CustomProductView {
  id                Int                               @id @default(autoincrement())
  name              String
  parentVariation   CustomProductSettingsVariation    @relation(fields: [parentVariationId], references: [id], onDelete: Cascade)
  parentVariationId Int
  locations         CustomProductDecorationLocation[]
  imageUrl          String
}

model CustomProductDecorationLocation {
  id           Int               @id @default(autoincrement())
  name         String
  positionX    Decimal
  positionY    Decimal
  width        Decimal
  height       Decimal
  parentView   CustomProductView @relation(fields: [parentViewId], references: [id], onDelete: Cascade)
  parentViewId Int
  frameColor   String            @default("808080") //hex code expected
  visible      Boolean           @default(true)
}

model CustomProductRequest {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  company   String
  local     String?
  phone     String?
  comments  String?
  cartJson  String
  createdAt DateTime @default(now())
}

model ProductSizeOptions {
  id                             Int                             @id @default(autoincrement())
  sizeSmall                      Boolean                         @default(false)
  sizeMedium                     Boolean                         @default(false)
  sizeLarge                      Boolean                         @default(false)
  sizeXL                         Boolean                         @default(false)
  size2XL                        Boolean                         @default(false)
  size3XL                        Boolean                         @default(false)
  size4XL                        Boolean                         @default(false)
  size5XL                        Boolean                         @default(false)
  size6XL                        Boolean                         @default(false)
  customProductSettingsVariation CustomProductSettingsVariation?
}

//#endregion
//#region Order Approval
model Webstore {
  id                           Int                       @id @default(autoincrement())
  name                         String
  organizationName             String
  url                          String                    @unique
  apiKey                       String //encrypted
  apiKeyEncryptIv              String
  apiKeyEncryptTag             String
  apiSecret                    String //encrypted
  apiSecretEncryptIv           String
  apiSecretEncryptTag          String
  salesPersonName              String                    @default("None")
  salesPersonEmail             String                    @default("None")
  otherSupportEmails           String? //when a customer submits a help form, the email will also go to all of these addresses
  orderUpdatedEmails           String?
  notifyUpdaterOnOrderUpdate   Boolean                   @default(true) //whether to send confirmation email to the person updating an order using the approval form. highly specific setting that should probably be replaced with something more comprehensive.
  customOrderApprovedEmail     String?
  useCustomOrderApprovedEmail  Boolean                   @default(false)
  reminderEmailTargets         String? //semicolon-separated list of email addresses to send reminder emails to about outstanding orders 
  sendReminderEmails           Boolean                   @default(true)
  shippingEmailFilename        String                    @default("NO_SHIPPING_EMAIL")
  shippingEmailDestOverride    String? //overrides the IP shipping team email defined in env variables; useful for testing so the email doesn't actually go to the team
  approverDashboardViewerEmail String                    @default("NO_EMAIL")
  requirePinForApproval        Boolean                   @default(true)
  allowOrderHelpRequest        Boolean                   @default(true) //whether to allow approvers to request assistance with an order using the "I need help" button in the approver area
  autoCreateApprover           Boolean                   @default(false) //if true, will automatically create a new user based on the email address in the "approver" field coming from WC (if one doesn't already exist) 
  shippingSettings             WebstoreShippingSettings?
  shippingMethods              WebstoreShippingMethod[]
  workflows                    OrderWorkflow[]
  roles                        WebstoreUserRole[]
  checkoutFields               WebstoreCheckoutField[]
  logs                         WebstoreLog[]
}

model WebstoreShippingSettings {
  id                        Int      @id @default(autoincrement())
  allowApproverChangeMethod Boolean
  allowUpsToCanada          Boolean
  webstoreId                Int      @unique
  webstore                  Webstore @relation(fields: [webstoreId], references: [id], onDelete: Cascade)
}

model WebstoreShippingMethod {
  id             Int        @id @default(autoincrement())
  name           String
  serviceCode    Int?
  serviceCodeStr String     @default("NONE")
  webstores      Webstore[]
}

model WebstoreCheckoutField {
  id          Int      @id @default(autoincrement())
  webstoreId  Int
  name        String
  label       String
  type        String
  options     String?
  userCanEdit Boolean  @default(true)
  order       Int      @default(0) //sorting order
  style       String? //not CSS; expects simple values like "emph" for a visually emphasized field
  webstore    Webstore @relation(fields: [webstoreId], references: [id], onDelete: Cascade)
}

model OrderWorkflow {
  id         Int                     @id @default(autoincrement())
  name       String
  webstoreId Int
  webstore   Webstore                @relation(fields: [webstoreId], references: [id])
  steps      OrderWorkflowStep[]
  instances  OrderWorkflowInstance[]
}

model OrderWorkflowUser {
  id                Int                       @id @default(autoincrement())
  name              String
  email             String                    @unique
  userRoles         WebstoreUserRole[]
  comments          OrderWorkflowComment[]
  accessCodes       OrderWorkflowAccessCode[]
  approvedInstances OrderWorkflowInstance[]   @relation("approvedByUser")
  deniedInstances   OrderWorkflowInstance[]   @relation("deniedByUser")
}

model WebstoreUserRole {
  id         Int                 @id @default(autoincrement())
  name       String              @default("New Role")
  webstoreId Int
  users      OrderWorkflowUser[]
  webstore   Webstore            @relation(fields: [webstoreId], references: [id])
}

model OrderWorkflowStep {
  id                   Int                                @id @default(autoincrement())
  name                 String
  order                Int
  actionTarget         String?
  otherActionTargets   String? //any emails sent to actionTarget will also be sent to these
  actionType           String
  actionSubject        String?
  actionMessage        String?
  proceedImmediatelyTo String? //if defined, will proceed to the specified step without waiting for events
  proceedListeners     OrderWorkflowStepProceedListener[]
  workflowId           Int
  workflow             OrderWorkflow                      @relation(fields: [workflowId], references: [id])
  displayId            Int?
  display              OrderWorkflowStepDisplay?
}

//data for visualizing workflow steps in admin area
model OrderWorkflowStepDisplay {
  id        Int               @id @default(autoincrement())
  positionX Int
  positionY Int
  step      OrderWorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId    Int               @unique
}

//when an event is received, it's checked against the current step's ProceedListeners.
//if one is found matching in "type" and "from", the workflow will try to proceed to
//whatever is specified by "goto" (usually a stringified step index or something like "next")
model OrderWorkflowStepProceedListener {
  id     Int               @id() @default(autoincrement())
  name   String
  type   String
  from   String
  goto   String
  stepId Int
  step   OrderWorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
}

model OrderWorkflowInstance {
  id                  Int                       @id @default(autoincrement())
  status              String
  wooCommerceOrderId  Int                       @unique
  purchaserEmail      String                    @default("No Email")
  purchaserName       String                    @default("No Name")
  currentStep         Int                       @default(0) //if "status" is not "finished", this is the current step we're waiting on (and therefore listening for events on)
  deniedReason        String?
  approvedComments    String?
  accessCodes         OrderWorkflowAccessCode[]
  comments            OrderWorkflowComment[]
  parentWorkflowId    Int
  parentWorkflow      OrderWorkflow             @relation(fields: [parentWorkflowId], references: [id])
  approvedByUser      OrderWorkflowUser?        @relation(fields: [approvedByUserEmail], references: [email], name: "approvedByUser") //whatever user most recently approved this instance
  approvedByUserEmail String?
  deniedByUser        OrderWorkflowUser?        @relation(fields: [deniedByUserEmail], references: [email], name: "deniedByUser")
  deniedByUserEmail   String?
  createdAt           DateTime                  @default(now())
  lastStartedAt       DateTime                  @default(now())
}

model OrderWorkflowComment {
  id               Int                   @id @default(autoincrement())
  userId           Int
  instanceId       Int
  user             OrderWorkflowUser     @relation(fields: [userId], references: [id])
  workflowInstance OrderWorkflowInstance @relation(fields: [instanceId], references: [id])
  text             String
}

model OrderWorkflowAccessCode {
  userId           Int
  instanceId       Int
  user             OrderWorkflowUser     @relation(fields: [userId], references: [id])
  workflowInstance OrderWorkflowInstance @relation(fields: [instanceId], references: [id])
  guid             String                @default(uuid())
  simplePin        String                @default("000000") //a random 6-digit pin the user needs to enter to approve/deny. a very simple verification layer that does not need encryption, cryptographic randomness, etc.
  userRole         String

  @@id([userId, instanceId])
}

model WebstoreLog {
  id         Int      @id @default(autoincrement())
  text       String
  severity   String   @default("Info") //values like "Info", "Warning", "Error", etc.
  event      String? //values like "Instance Started", "Instance Approved", "Email Failed", etc.
  webstore   Webstore @relation(fields: [webstoreId], references: [id])
  webstoreId Int
  createdAt  DateTime @default(now())
}

//#endregion
